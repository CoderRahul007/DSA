# Input:  arr[] = {1, 6, 11, 5} 
# Output: 1
# Explanation:
# Subset1 = {1, 5, 6}, sum of Subset1 = 12 
# Subset2 = {11}, sum of Subset2 = 11    


# If we have reached last element.
# Sum of one subset is sumCalculated,
# sum of other subset is sumTotal-
# sumCalculated.  Return absolute
# difference of two sums.

# All the sums can be generated by either 
# (1) including that element in set 1.
# (2) without including that element in set 1.
# So possible combinations are :-  
# arr[0]      (1 or 2)  -> 2 values
# arr[1]    (1 or 2)  -> 2 values
# .
# .
# .
# arr[n]     (2 or 2)  -> 2 values
# So time complexity will be 2*2*..... *2 (For n times),
# that is O(2^n).

import sys

def findMinRec(arr, i, sumCalculated,
               sumTotal):
    if i == 0: # we reached the first element then return the abs diff
        return abs(sumTotal - 2 * sumCalculated)
    else: # exclude it
        return min(findMinRec(arr , i-1 , sumCalculated, sumTotal),  
        findMinRec(arr , i-1 , sumCalculated + arr[i-1] , sumTotal))  #include it

#O(2^N)


def findMinDP(arr , n , sum):
    dp = [[False for i in range(sum+1)] for j in range(n+1)]

    for i in range(n+1):
        dp[i][0] = True
    for j in range(1,sum +1):
        dp[0][j] = False
    
    # Fill using Subset problem 
    for i in range(1 , n +1):
        for j in range(1 , sum +1):
            if arr[i-1] > j :
                dp[i][j] = dp[i-1][j]
            else:
                dp[i][j] = dp[i-1][j] or dp[i-1][j-arr[i-1]]
    
    diff = sys.maxsize
    # start from sum//2 from the bottom of dp table sum//2 is the column number
    # as diff = min of  abs((sum-s1) - s1) -> min of abs(sum - 2*s1) -> since sum is greater then min of s1<= sum//2
    for i in range(sum // 2, -1, -1):
        if dp[n][i]:
            diff = min(sum - 2* i , diff)
    return diff

    




arr = [3, 1, 4, 2, 2, 1]
n = len(arr)
print(findMinRec(arr, n, 0, sum(arr)))

print(findMinDP(arr, n , sum(arr)))