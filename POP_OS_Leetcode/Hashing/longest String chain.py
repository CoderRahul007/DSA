# We use a dictionary cache to memorize the outcome of the dp function chain
# We consturct a dictionary words_dict from words for O(1) lookup
# [The chain function]

#     Exit condition: when word does not exist in words
#     Recursion algorithm: we apply chain recursively against all the possible strings generated by remove ONE character from word
#     Record the outcome if the chain function in cache

#     def longestStrChain(self, words: List[str]) -> int:
#         cache = {}
# 		words_dict = {word:None for word in words}
#         def chain(word):
#             if word in cache: return cache[word]
#             if word in words:
#                 cache[word] = 1 + max(
#                     map(chain, [word[:idx]+word[idx+1:] for idx in range(len(word))])
#                 )
#                 return cache[word]
#             return 0
#         return max(map(chain, words))
# Given a list of words, each word consists of English lowercase letters.

# Let's say word1 is a predecessor of word2 if and only if we can add exactly one letter anywhere in word1 to make it equal to word2.  For example, "abc" is a predecessor of "abac".

# A word chain is a sequence of words [word_1, word_2, ..., word_k] with k >= 1, where word_1 is a predecessor of word_2, word_2 is a predecessor of word_3, and so on.

# Return the longest possible length of a word chain with words chosen from the given list of words.

 

# Example 1:

# Input: ["a","b","ba","bca","bda","bdca"]
# Output: 4
# Explanation: one of the longest word chain is "a","ba","bda","bdca".

class Solution:
    def longestStrChain(self, words):
        def diff(b,a):
            arr=[0]*26
            l=0
            for i in b:
                arr[ord(i)-97]+=1
            for i in a:
                arr[ord(i)-97]-=1
            for i in arr:
                l+=abs(i)
            return l
                
        i=0
        m=0
        l=[]
        while i<len(words):
            c=1
            res=[]
            a=words[i]
            res.append(a)
            for j in range(len(words)):
                if j!=i:
                    b=words[j]                          
                    if len(b)-len(a) ==1 and diff(b,a)==1:                        
                        c+=1                       
                        res.append(b)
                        a=b   
            print(res)
            if m<c:
                m=c
                l=res
            i+=1
        print(l)
        return m
def sorting(arr):
    l=[]
    for i in arr:
        l.append(''.join((sorted(i))))
    l.sort(key=len)
    return l
s=Solution()
print(s.longestStrChain(["a","b","ba","bca","bda","bdca"]))
